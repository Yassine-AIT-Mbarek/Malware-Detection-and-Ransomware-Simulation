import os
import yara
import tkinter as tk
from tkinter import filedialog, messagebox
from tkinter import ttk
from PIL import Image, ImageTk
import threading
import time
import datetime

# Compile YARA rules
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)
    
# Compile YARA rules
rules = yara.compile(filepath=(resource_path('malware_rules.yar')))

# Global variable to store the selected directory
selected_directory = None

def scan_directory(directory):
    malware_found = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                matches = rules.match(file_path)
                if matches:
                    malware_found.append(file_path)
            except Exception as e:
                print(f"Error scanning file {file_path}: {e}")
    
    if malware_found:
        
        File_Path = resource_path('rapport.txt')
        Date_Test = datetime.datetime.now()
        print(Date_Test)
        with open(File_Path, 'w') as file:
            file.write(f'{Date_Test} \n\n\n')
            Rapport = ("Malware Detected", f"Malware detected in the following files:\n" + "\n".join(malware_found))
            file.write(f'{Rapport[0]}: {Rapport[1]}')
            file.write('\n\n\n')

def periodic_scan():
    while True:
        if selected_directory:
            scan_directory(selected_directory)
        time.sleep(10)

def select_directory():
    global selected_directory
    directory = filedialog.askdirectory()
    if directory:
        selected_directory = directory

def start_background_scan():
    bg_thread = threading.Thread(target=periodic_scan)
    bg_thread.daemon = True
    bg_thread.start()


root = tk.Tk()
root.title("Malware Detector")
root.withdraw() 
background_image = Image.open("Blackbeard.png")
background_photo = ImageTk.PhotoImage(background_image)
start_background_scan()
select_directory()
root.mainloop()
